
                                        ⢀⣀ ⡀⣀ ⡀⢀ ⣀⡀ ⣰⡀ ⢀⣸ ⢀⡀
                                        ⠣⠤ ⠏  ⣑⡺ ⡧⠜ ⠘⠤ ⠣⠼ ⠣⠜

                     a simple wrapper for commands which access sensitive files

= about

Occasionally you need to run commands which put sensitive information in files.  Then, through poor
life choices, you want to commit those files to a source repository or something similar. This
program will let you transparently decrypt a file, run your command, and then re-encrypt the file
again.

The usage will show how this can be useful.


= usage

First, you need to bootstrap the encryption by encrypting your sensitive files.

    $ cryptdo-boostrap -passphrase hunter2 terraform.tfstate
    $ rm terraform.tfstate

Next, you can run commands which need to access those files by decorating them with cryptdo. This
will decrypt the file, run the command, and then re-encrypt the file with any changes.

    $ cryptdo -passphrase hunter2 -- terraform apply

If you need to change the key of your encrypted files then the following command is your friend.

    $ cryptdo-rekey -old hunter2 -new abetterkey terraform.tfstate.enc


= installation

Not yet!


= development

    $ go get github.com/xoebus/cryptdo
    $ cd $GOPATH/src/github.com/xoebus/cryptdo
    $ dep ensure
    ...
    $ go test ./...


= cryptography

The encryption used is AES-256 in GCM mode with a 12 byte nonce. The nonce is generated from the Go
standard library cryptographically secure random number generator.

The encryption key is derived from the user's passphrase using PBKDF2-HMAC-SHA384. The hashing
function is applied 100,000 times and the salt used is 32 bytes. SHA384 is used because of the
proliferation of specialized hardware to attack SHA256 due to its use in Bitcoin.

The encryption key (derived from the user's passphrase) must be rotated before 2^32 encryptions have
taken place with a single key. Due to the usage patterns of a tool like this it is unlikely that
this limit will be reached but a `cryptdo-rekey` tool has been provided, just in case.

